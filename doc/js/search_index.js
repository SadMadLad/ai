var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","mlmodel","mlmodelscontroller","mlmodelshelper","structs","torch","networks","applicationnetwork","mnistnetwork","services","mnisttrainservice","[]()","all()","find()","index()","load_dict()","predict()","show()","tailwind.css","application.css","application.css","application.js","application.js","hello_controller.js","index.js","service-worker.js"],"longSearchIndex":["applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","mlmodel","mlmodelscontroller","mlmodelshelper","structs","torch","torch::networks","torch::networks::applicationnetwork","torch::networks::mnistnetwork","torch::services","torch::services::mnisttrainservice","mlmodel::[]()","mlmodel::all()","mlmodel::find()","mlmodelscontroller#index()","torch::networks::applicationnetwork::load_dict()","mlmodelscontroller#predict()","mlmodelscontroller#show()","","","","","","","",""],"info":[["ApplicationController","","ApplicationController.html","","<p>Base Rails Controller\n"],["ApplicationHelper","","ApplicationHelper.html","","<p>Base Helper\n"],["ApplicationJob","","ApplicationJob.html","","<p>Base Job\n"],["ApplicationMailer","","ApplicationMailer.html","","<p>Base Mailer\n"],["ApplicationRecord","","ApplicationRecord.html","","<p>Base Active Record\n"],["MlModel","","MlModel.html","","<p>Convenient Wrapper for querying neural networks eager loaded on Rails initialization, under <code>config/initializers/ml_models.rb</code> …\n"],["MlModelsController","","MlModelsController.html","","<p>resources :ml_models\n"],["MlModelsHelper","","MlModelsHelper.html","","<p>Machine Learning Models Helper\n"],["Structs","","Structs.html","","<p>Collection of Structs beings used throughout the application\n"],["Torch","","Torch.html","","<p>Module of <code>torch-rb</code> gem.\n"],["Torch::Networks","","Torch/Networks.html","","<p>Module containing all the neural networks developed using <code>torch-rb</code>\n"],["Torch::Networks::ApplicationNetwork","","Torch/Networks/ApplicationNetwork.html","","<p>Base Network for Training\n"],["Torch::Networks::MnistNetwork","","Torch/Networks/MnistNetwork.html","","<p>Neural Network to train over mnist\n"],["Torch::Services","","Torch/Services.html","","<p>Module containing all the services for <code>torch-rb</code> networks.\n"],["Torch::Services::MnistTrainService","","Torch/Services/MnistTrainService.html","","<p>Service to train <code>MnistNetwork</code>, test, evaluate and save the weights of the model\n"],["[]","MlModel","MlModel.html#method-c-5B-5D","(id)",""],["all","MlModel","MlModel.html#method-c-all","()","<p>Enlist all the models\n<p>returns\n\n"],["find","MlModel","MlModel.html#method-c-find","(id)","<p>Query model based on symbols\n<p><code>args</code>\n<p><code>id [String, Symbol]</code>: Key value for ML_MODELS.\n"],["index","MlModelsController","MlModelsController.html#method-i-index","()","<p>GET /ml_models\n"],["load_dict","Torch::Networks::ApplicationNetwork","Torch/Networks/ApplicationNetwork.html#method-c-load_dict","(parameters_file)","<p>Loads weights from a file into the neural network\n<p><code>args</code>\n<p><code>parameters_file [String]</code>: Path to file to load weights …\n"],["predict","MlModelsController","MlModelsController.html#method-i-predict","()","<p>POST /ml_models/:id/predict\n"],["show","MlModelsController","MlModelsController.html#method-i-show","()","<p>GET /ml_models/:id\n"],["tailwind.css","","app/assets/builds/tailwind_css.html","","<p>/*! tailwindcss v4.1.8 | MIT License | tailwindcss.com */ @import “fonts.googleapis.com/css2?family=Geist:wght@100..900&amp;display=swap …\n"],["application.css","","app/assets/stylesheets/application_css.html","","<p>/*\n\n<pre>* This is a manifest file that&#39;ll be compiled into application.css.\n*\n* With Propshaft, assets are ...</pre>\n"],["application.css","","app/assets/tailwind/application_css.html","","<p>@import url(‘fonts.googleapis.com/css2?family=Geist:wght@100..900&amp;display=swap’); @import …\n"],["application.js","","app/javascript/application_js.html","","<p>// Configure your import map in config/importmap.rb. Read more: github.com/rails/importmap-rails import …\n"],["application.js","","app/javascript/controllers/application_js.html","","<p>import { Application } from “@hotwired/stimulus”\n<p>const application = Application.start()\n<p>//  …\n"],["hello_controller.js","","app/javascript/controllers/hello_controller_js.html","","<p>import { Controller } from “@hotwired/stimulus”\n<p>export default class extends Controller {\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">connect</span>() <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index.js","","app/javascript/controllers/index_js.html","","<p>// Import and register all your controllers from the importmap via controllers/<strong>*/</strong>_controller import { …\n"],["service-worker.js","","app/views/pwa/service-worker_js.html","","<p>// Add a service worker for processing Web Push notifications: // // self.addEventListener(“push”, …\n"]]}}